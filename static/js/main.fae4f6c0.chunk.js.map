{"version":3,"sources":["components/Nav.js","components/Logo.js","components/SearchBar.js","components/ImageRecognized.js","containers/App.js","serviceWorker.js","index.js"],"names":["Nav","className","Logo","id","SearchBar","onSending","onTyping","type","onChange","onClick","ImageRecognized","imageUrl","answer","alt","src","app","Clarifai","App","apiKey","event","setState","seachField","target","value","getFaceData","state","URL","models","predict","then","response","name","rawData","outputs","data","regions","concepts","predictName","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uQAaeA,EAXH,WACR,OACI,yBAAKC,UAAU,oBACX,yBAAKA,UAAU,gCAAf,aCOGC,EAVF,WACT,OACI,6BACI,yBAAKC,GAAG,OAAOF,UAAU,kDAAzB,gBCUGG,EAbG,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,SAC3B,OACI,yBAAKL,UAAU,2BACX,6CACA,yBAAKA,UAAU,wCACX,2BAAOM,KAAK,SAASN,UAAU,UAAUO,SAAUF,IACnD,4BAAQL,UAAU,aAAaQ,QAASJ,GAAxC,WCgBDK,EAtBS,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,SAASC,EAAY,EAAZA,OAC/B,MAAa,KAATA,EAEI,yBAAKX,UAAU,0CAEX,6BACI,+CAAoB,0BAAMA,UAAU,gBAAgBW,GAApD,MAEJ,yBAAKX,UAAU,oBACX,yBAAKY,IAAI,YAAYC,IAAKH,MAMlC,yBAAKV,UAAU,2BACX,yBAAKY,IAAI,YAAYC,IAAKH,MCVpCI,G,MAAM,IAAIC,IAASC,IAAI,CAC3BC,OAAQ,sCA4CKD,E,kDAxCb,aAAc,IAAD,8BACX,gBAQFX,SAAW,SAACa,GACV,EAAKC,SAAS,CAACC,WAAWF,EAAMG,OAAOC,SAV5B,EAablB,UAAY,SAACc,GACX,EAAKK,YAAY,EAAKC,MAAMJ,YAC5B,EAAKD,SAAS,CAACM,IAAI,EAAKD,MAAMJ,cAfnB,EAkBbG,YAAa,SAACE,GACZX,EAAIY,OAAOC,QAAQ,mCAAmCF,GACrDG,MAAK,SAAAC,GACJ,IAAMC,EAAOD,EAASE,QAAQC,QAAQ,GAAGC,KAAKC,QAAQ,GAAGD,KAAKE,SAAS,GAAGL,KAC1E,EAAKX,SAAS,CAACiB,YAAYN,QApB7B,EAAKN,MAAQ,CACXJ,WAAW,8CACXK,IAAI,8CACJW,YAAY,IALH,E,qDA6BX,OACE,yBAAKpC,UAAU,oBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWI,UAAWiC,KAAKjC,UAAWC,SAAUgC,KAAKhC,WACrD,kBAAC,EAAD,CAAiBK,SAAU2B,KAAKb,MAAMC,IAAKd,OAAQ0B,KAAKb,MAAMY,mB,GAnCpDE,aCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fae4f6c0.chunk.js","sourcesContent":["import React from 'react';\n\nconst Nav = () => {\n    return(\n        <div className=\"flex justify-end\">\n            <nav className=\"f5 code mh5 mv3 grow pointer\">\n            {/* code font, max horizontal, max vertical,動畫長大 */}\n                sign in\n            </nav>\n        </div>\n    )\n}\n\nexport default Nav;","import React from 'react';\n\nconst Logo = () => {\n    return(\n        <div>\n            <div id=\"logo\" className=\"f2 tc ba bw1 br3 fl w-10 ml3 mt5 shadow-3 grow\">\n                logo brain\n            </div>\n        </div>\n    )\n}\n\nexport default Logo;","import React from 'react';\n\nconst SearchBar = ({onSending, onTyping}) => {\n    return(\n        <div className=\"mt5 tc flex flex-column\">\n            <h3>give it a try</h3>\n            <div className=\"flex justify-center items-center mh7\">\n                <input type=\"search\" className=\"fl w-70\" onChange={onTyping}/>\n                <button className=\"fl w-30 tc\" onClick={onSending}>send</button>\n            </div>\n        </div>\n        \n    )\n}\n\nexport default SearchBar; ","import React from 'react';\n\nconst ImageRecognized = ({imageUrl,answer}) => {\n    if (answer!==''){\n        return(\n            <div className=\"mt1 tc flex flex-column justify-center\">\n            {/* margin top,text center */}\n                <div>\n                    <p>The celebrity is <span className=\"f3 dark-blue\">{answer}</span>.</p>\n                </div>\n                <div className=\"mh6 mw-50 shadow\">\n                    <img alt=\"celebrity\" src={imageUrl}/>\n                </div>\n            </div>\n        )\n    } else {\n        return(\n            <div className=\"mt1 tc mh6 mw-50 shadow\">\n                <img alt=\"celebrity\" src={imageUrl}/>\n            </div>\n        )\n    }\n}\n\nexport default ImageRecognized;","import React, { Component } from 'react';\nimport Clarifai from 'clarifai';\nimport Nav from '../components/Nav.js';\nimport Logo from '../components/Logo.js';\nimport SearchBar from '../components/SearchBar.js';\nimport ImageRecognized from '../components/ImageRecognized.js';\nimport 'tachyons';\n\nconst app = new Clarifai.App({\n  apiKey: 'a40220c771334acaafb67dd020f7f9d0'\n });\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {\n      seachField:'https://samples.clarifai.com/celebrity.jpeg',\n      URL:'https://samples.clarifai.com/celebrity.jpeg',\n      predictName:''\n    }\n  }\n \n  onTyping = (event) => {\n    this.setState({seachField:event.target.value});\n  }\n\n  onSending = (event) => {\n    this.getFaceData(this.state.seachField);\n    this.setState({URL:this.state.seachField})\n  }\n\n  getFaceData= (URL) => {\n    app.models.predict(\"e466caa0619f444ab97497640cefc4dc\",URL)\n    .then(response => {\n      const name = response.rawData.outputs[0].data.regions[0].data.concepts[0].name;\n      this.setState({predictName:name});\n    });\n  }\n\n  \n  render (){\n\n    return(\n      <div className=\"flex flex-column\">\n        <Nav />\n        <Logo />\n        <SearchBar onSending={this.onSending} onTyping={this.onTyping}/>\n        <ImageRecognized imageUrl={this.state.URL} answer={this.state.predictName}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n                                                                                     ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}